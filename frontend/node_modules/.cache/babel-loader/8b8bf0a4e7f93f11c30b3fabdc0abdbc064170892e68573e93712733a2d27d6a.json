{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport api from \"../../services/api\";\n\n// Load search history from localStorage\nconst loadSearchHistory = () => {\n  try {\n    const stored = localStorage.getItem(\"searchHistory\");\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error(\"Error loading search history:\", error);\n    return [];\n  }\n};\n\n// Load search alerts from localStorage\nconst loadSearchAlerts = () => {\n  try {\n    const stored = localStorage.getItem(\"searchAlerts\");\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error(\"Error loading search alerts:\", error);\n    return [];\n  }\n};\n\n// Save search history to localStorage\nconst saveSearchHistory = history => {\n  try {\n    localStorage.setItem(\"searchHistory\", JSON.stringify(history));\n  } catch (error) {\n    console.error(\"Error saving search history:\", error);\n  }\n};\n\n// Save search alerts to localStorage\nconst saveSearchAlerts = alerts => {\n  try {\n    localStorage.setItem(\"searchAlerts\", JSON.stringify(alerts));\n  } catch (error) {\n    console.error(\"Error saving search alerts:\", error);\n  }\n};\n\n// Search products with filters\nexport const searchProducts = createAsyncThunk(\"search/searchProducts\", async (searchParams, thunkAPI) => {\n  try {\n    const response = await api.get(\"/products/search\", {\n      params: searchParams\n    });\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get search suggestions\nexport const getSearchSuggestions = createAsyncThunk(\"search/getSearchSuggestions\", async (query, thunkAPI) => {\n  try {\n    const response = await api.get(`/products/search-suggestions?q=${query}`);\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get trending searches\nexport const getTrendingSearches = createAsyncThunk(\"search/getTrendingSearches\", async (_, thunkAPI) => {\n  try {\n    const response = await api.get(\"/products/trending-searches\");\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get search analytics\nexport const getSearchAnalytics = createAsyncThunk(\"search/getSearchAnalytics\", async (_, thunkAPI) => {\n  try {\n    const response = await api.get(\"/search/analytics\");\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get search insights\nexport const getSearchInsights = createAsyncThunk(\"search/getSearchInsights\", async (query, thunkAPI) => {\n  try {\n    const response = await api.get(`/search/insights?q=${query}`);\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Export search results\nexport const exportSearchResults = createAsyncThunk(\"search/exportSearchResults\", async ({\n  format,\n  searchParams\n}, thunkAPI) => {\n  try {\n    const response = await api.get(\"/search/export\", {\n      params: {\n        format,\n        ...searchParams\n      },\n      responseType: \"blob\"\n    });\n    return {\n      data: response.data,\n      format\n    };\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst initialState = {\n  // Search state\n  query: \"\",\n  results: [],\n  totalResults: 0,\n  isLoading: false,\n  isError: false,\n  message: \"\",\n  // Filters\n  filters: {\n    priceRange: {\n      min: 0,\n      max: 1000\n    },\n    brands: [],\n    categories: [],\n    ratings: [],\n    availability: \"all\",\n    // all, inStock, outOfStock\n    sortBy: \"relevance\",\n    // relevance, priceLow, priceHigh, rating, newest\n    viewMode: \"grid\",\n    // grid, list\n    // Advanced filters\n    dateRange: {\n      start: null,\n      end: null\n    },\n    location: \"\",\n    tags: [],\n    features: [],\n    condition: \"all\",\n    // all, new, used, refurbished\n    warranty: \"all\",\n    // all, yes, no\n    freeShipping: false,\n    onSale: false\n  },\n  // Search suggestions\n  suggestions: [],\n  trendingSearches: [],\n  // Search history\n  searchHistory: loadSearchHistory(),\n  maxHistoryItems: 10,\n  // Search alerts\n  searchAlerts: loadSearchAlerts(),\n  maxAlertsItems: 5,\n  // UI state\n  isFiltersOpen: false,\n  isSearchFocused: false,\n  showSuggestions: false,\n  showAnalytics: false,\n  showInsights: false,\n  // Analytics\n  searchAnalytics: {\n    totalSearches: 0,\n    popularSearches: [],\n    searchPerformance: {},\n    userBehavior: {},\n    conversionRates: {}\n  },\n  // Search insights\n  searchInsights: {\n    relatedSearches: [],\n    popularCategories: [],\n    trendingProducts: [],\n    priceInsights: {},\n    recommendations: []\n  },\n  // Export state\n  isExporting: false,\n  exportError: null\n};\nconst searchSlice = createSlice({\n  name: \"search\",\n  initialState,\n  reducers: {\n    // Search actions\n    setQuery: (state, action) => {\n      state.query = action.payload;\n    },\n    clearQuery: state => {\n      state.query = \"\";\n    },\n    clearResults: state => {\n      state.results = [];\n      state.totalResults = 0;\n    },\n    // Filter actions\n    setPriceRange: (state, action) => {\n      state.filters.priceRange = action.payload;\n    },\n    setBrands: (state, action) => {\n      state.filters.brands = action.payload;\n    },\n    setCategories: (state, action) => {\n      state.filters.categories = action.payload;\n    },\n    setRatings: (state, action) => {\n      state.filters.ratings = action.payload;\n    },\n    setAvailability: (state, action) => {\n      state.filters.availability = action.payload;\n    },\n    setSortBy: (state, action) => {\n      state.filters.sortBy = action.payload;\n    },\n    setViewMode: (state, action) => {\n      state.filters.viewMode = action.payload;\n    },\n    clearFilters: state => {\n      state.filters = {\n        priceRange: {\n          min: 0,\n          max: 1000\n        },\n        brands: [],\n        categories: [],\n        ratings: [],\n        availability: \"all\",\n        sortBy: \"relevance\",\n        viewMode: \"grid\"\n      };\n    },\n    // UI actions\n    toggleFilters: state => {\n      state.isFiltersOpen = !state.isFiltersOpen;\n    },\n    setFiltersOpen: (state, action) => {\n      state.isFiltersOpen = action.payload;\n    },\n    setSearchFocused: (state, action) => {\n      state.isSearchFocused = action.payload;\n    },\n    setShowSuggestions: (state, action) => {\n      state.showSuggestions = action.payload;\n    },\n    // Search history actions\n    addToSearchHistory: (state, action) => {\n      const query = action.payload;\n      // Remove if already exists\n      state.searchHistory = state.searchHistory.filter(item => item !== query);\n      // Add to beginning\n      state.searchHistory.unshift(query);\n      // Keep only max items\n      if (state.searchHistory.length > state.maxHistoryItems) {\n        state.searchHistory = state.searchHistory.slice(0, state.maxHistoryItems);\n      }\n      saveSearchHistory(state.searchHistory);\n    },\n    removeFromSearchHistory: (state, action) => {\n      const query = action.payload;\n      state.searchHistory = state.searchHistory.filter(item => item !== query);\n      saveSearchHistory(state.searchHistory);\n    },\n    clearSearchHistory: state => {\n      state.searchHistory = [];\n      localStorage.removeItem(\"searchHistory\");\n    },\n    // Search alerts actions\n    addToSearchAlerts: (state, action) => {\n      const alert = action.payload;\n      // Remove if already exists\n      state.searchAlerts = state.searchAlerts.filter(item => item.id === alert.id);\n      // Add to beginning\n      state.searchAlerts.unshift(alert);\n      // Keep only max items\n      if (state.searchAlerts.length > state.maxAlertsItems) {\n        state.searchAlerts = state.searchAlerts.slice(0, state.maxAlertsItems);\n      }\n      saveSearchAlerts(state.searchAlerts);\n    },\n    removeFromSearchAlerts: (state, action) => {\n      const alertId = action.payload;\n      state.searchAlerts = state.searchAlerts.filter(item => item.id !== alertId);\n      saveSearchAlerts(state.searchAlerts);\n    },\n    clearSearchAlerts: state => {\n      state.searchAlerts = [];\n      localStorage.removeItem(\"searchAlerts\");\n    },\n    // Analytics actions\n    setShowAnalytics: (state, action) => {\n      state.showAnalytics = action.payload;\n    },\n    setShowInsights: (state, action) => {\n      state.showInsights = action.payload;\n    },\n    // Export actions\n    setIsExporting: (state, action) => {\n      state.isExporting = action.payload;\n    },\n    setExportError: (state, action) => {\n      state.exportError = action.payload;\n    },\n    // Reset actions\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.message = \"\";\n    },\n    clearError: state => {\n      state.isError = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Search Products\n    .addCase(searchProducts.pending, state => {\n      state.isLoading = true;\n      state.isError = false;\n    }).addCase(searchProducts.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.results = action.payload.products || [];\n      state.totalResults = action.payload.total || 0;\n      // Add to search history\n      if (state.query.trim()) {\n        state.searchHistory = state.searchHistory.filter(item => item !== state.query);\n        state.searchHistory.unshift(state.query);\n        if (state.searchHistory.length > state.maxHistoryItems) {\n          state.searchHistory = state.searchHistory.slice(0, state.maxHistoryItems);\n        }\n        saveSearchHistory(state.searchHistory);\n      }\n    }).addCase(searchProducts.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    })\n    // Get Search Suggestions\n    .addCase(getSearchSuggestions.pending, state => {\n      // Don't set loading for suggestions\n    }).addCase(getSearchSuggestions.fulfilled, (state, action) => {\n      state.suggestions = action.payload.suggestions || [];\n    }).addCase(getSearchSuggestions.rejected, (state, action) => {\n      state.suggestions = [];\n    })\n    // Get Trending Searches\n    .addCase(getTrendingSearches.pending, state => {\n      // Don't set loading for trending searches\n    }).addCase(getTrendingSearches.fulfilled, (state, action) => {\n      state.trendingSearches = action.payload.trending || [];\n    }).addCase(getTrendingSearches.rejected, (state, action) => {\n      state.trendingSearches = [];\n    })\n    // Get Search Analytics\n    .addCase(getSearchAnalytics.pending, state => {\n      // Don't set loading for analytics\n    }).addCase(getSearchAnalytics.fulfilled, (state, action) => {\n      state.searchAnalytics = action.payload;\n    }).addCase(getSearchAnalytics.rejected, (state, action) => {\n      // state.searchAnalytics = {}; // No need to reset, it's a total count\n    })\n    // Get Search Insights\n    .addCase(getSearchInsights.pending, state => {\n      // Don't set loading for insights\n    }).addCase(getSearchInsights.fulfilled, (state, action) => {\n      state.searchInsights = action.payload;\n    }).addCase(getSearchInsights.rejected, (state, action) => {\n      // state.searchInsights = {}; // No need to reset, it's a total count\n    })\n    // Export Search Results\n    .addCase(exportSearchResults.pending, state => {\n      state.isExporting = true;\n      state.exportError = null;\n    }).addCase(exportSearchResults.fulfilled, (state, action) => {\n      state.isExporting = false;\n      // You might want to trigger a download here or handle the blob data\n      // For now, we'll just log the success\n      console.log(\"Search results exported successfully:\", action.payload);\n    }).addCase(exportSearchResults.rejected, (state, action) => {\n      state.isExporting = false;\n      state.exportError = action.payload;\n      console.error(\"Error exporting search results:\", action.payload);\n    });\n  }\n});\nexport const {\n  setQuery,\n  clearQuery,\n  clearResults,\n  setPriceRange,\n  setBrands,\n  setCategories,\n  setRatings,\n  setAvailability,\n  setSortBy,\n  setViewMode,\n  clearFilters,\n  toggleFilters,\n  setFiltersOpen,\n  setSearchFocused,\n  setShowSuggestions,\n  addToSearchHistory,\n  removeFromSearchHistory,\n  clearSearchHistory,\n  addToSearchAlerts,\n  removeFromSearchAlerts,\n  clearSearchAlerts,\n  setShowAnalytics,\n  setShowInsights,\n  setIsExporting,\n  setExportError,\n  reset,\n  clearError\n} = searchSlice.actions;\nexport default searchSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","loadSearchHistory","stored","localStorage","getItem","JSON","parse","error","console","loadSearchAlerts","saveSearchHistory","history","setItem","stringify","saveSearchAlerts","alerts","searchProducts","searchParams","thunkAPI","response","get","params","data","message","toString","rejectWithValue","getSearchSuggestions","query","getTrendingSearches","_","getSearchAnalytics","getSearchInsights","exportSearchResults","format","responseType","initialState","results","totalResults","isLoading","isError","filters","priceRange","min","max","brands","categories","ratings","availability","sortBy","viewMode","dateRange","start","end","location","tags","features","condition","warranty","freeShipping","onSale","suggestions","trendingSearches","searchHistory","maxHistoryItems","searchAlerts","maxAlertsItems","isFiltersOpen","isSearchFocused","showSuggestions","showAnalytics","showInsights","searchAnalytics","totalSearches","popularSearches","searchPerformance","userBehavior","conversionRates","searchInsights","relatedSearches","popularCategories","trendingProducts","priceInsights","recommendations","isExporting","exportError","searchSlice","name","reducers","setQuery","state","action","payload","clearQuery","clearResults","setPriceRange","setBrands","setCategories","setRatings","setAvailability","setSortBy","setViewMode","clearFilters","toggleFilters","setFiltersOpen","setSearchFocused","setShowSuggestions","addToSearchHistory","filter","item","unshift","length","slice","removeFromSearchHistory","clearSearchHistory","removeItem","addToSearchAlerts","alert","id","removeFromSearchAlerts","alertId","clearSearchAlerts","setShowAnalytics","setShowInsights","setIsExporting","setExportError","reset","clearError","extraReducers","builder","addCase","pending","fulfilled","products","total","trim","rejected","trending","log","actions","reducer"],"sources":["C:/Users/Ayoub/Desktop/Projects/e-commerce/frontend/src/features/search/searchSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport api from \"../../services/api\";\r\n\r\n// Load search history from localStorage\r\nconst loadSearchHistory = () => {\r\n  try {\r\n    const stored = localStorage.getItem(\"searchHistory\");\r\n    return stored ? JSON.parse(stored) : [];\r\n  } catch (error) {\r\n    console.error(\"Error loading search history:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Load search alerts from localStorage\r\nconst loadSearchAlerts = () => {\r\n  try {\r\n    const stored = localStorage.getItem(\"searchAlerts\");\r\n    return stored ? JSON.parse(stored) : [];\r\n  } catch (error) {\r\n    console.error(\"Error loading search alerts:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Save search history to localStorage\r\nconst saveSearchHistory = (history) => {\r\n  try {\r\n    localStorage.setItem(\"searchHistory\", JSON.stringify(history));\r\n  } catch (error) {\r\n    console.error(\"Error saving search history:\", error);\r\n  }\r\n};\r\n\r\n// Save search alerts to localStorage\r\nconst saveSearchAlerts = (alerts) => {\r\n  try {\r\n    localStorage.setItem(\"searchAlerts\", JSON.stringify(alerts));\r\n  } catch (error) {\r\n    console.error(\"Error saving search alerts:\", error);\r\n  }\r\n};\r\n\r\n// Search products with filters\r\nexport const searchProducts = createAsyncThunk(\r\n  \"search/searchProducts\",\r\n  async (searchParams, thunkAPI) => {\r\n    try {\r\n      const response = await api.get(\"/products/search\", {\r\n        params: searchParams,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Get search suggestions\r\nexport const getSearchSuggestions = createAsyncThunk(\r\n  \"search/getSearchSuggestions\",\r\n  async (query, thunkAPI) => {\r\n    try {\r\n      const response = await api.get(`/products/search-suggestions?q=${query}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Get trending searches\r\nexport const getTrendingSearches = createAsyncThunk(\r\n  \"search/getTrendingSearches\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const response = await api.get(\"/products/trending-searches\");\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Get search analytics\r\nexport const getSearchAnalytics = createAsyncThunk(\r\n  \"search/getSearchAnalytics\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const response = await api.get(\"/search/analytics\");\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Get search insights\r\nexport const getSearchInsights = createAsyncThunk(\r\n  \"search/getSearchInsights\",\r\n  async (query, thunkAPI) => {\r\n    try {\r\n      const response = await api.get(`/search/insights?q=${query}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Export search results\r\nexport const exportSearchResults = createAsyncThunk(\r\n  \"search/exportSearchResults\",\r\n  async ({ format, searchParams }, thunkAPI) => {\r\n    try {\r\n      const response = await api.get(\"/search/export\", {\r\n        params: { format, ...searchParams },\r\n        responseType: \"blob\",\r\n      });\r\n      return { data: response.data, format };\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  // Search state\r\n  query: \"\",\r\n  results: [],\r\n  totalResults: 0,\r\n  isLoading: false,\r\n  isError: false,\r\n  message: \"\",\r\n\r\n  // Filters\r\n  filters: {\r\n    priceRange: { min: 0, max: 1000 },\r\n    brands: [],\r\n    categories: [],\r\n    ratings: [],\r\n    availability: \"all\", // all, inStock, outOfStock\r\n    sortBy: \"relevance\", // relevance, priceLow, priceHigh, rating, newest\r\n    viewMode: \"grid\", // grid, list\r\n    // Advanced filters\r\n    dateRange: { start: null, end: null },\r\n    location: \"\",\r\n    tags: [],\r\n    features: [],\r\n    condition: \"all\", // all, new, used, refurbished\r\n    warranty: \"all\", // all, yes, no\r\n    freeShipping: false,\r\n    onSale: false,\r\n  },\r\n\r\n  // Search suggestions\r\n  suggestions: [],\r\n  trendingSearches: [],\r\n\r\n  // Search history\r\n  searchHistory: loadSearchHistory(),\r\n  maxHistoryItems: 10,\r\n\r\n  // Search alerts\r\n  searchAlerts: loadSearchAlerts(),\r\n  maxAlertsItems: 5,\r\n\r\n  // UI state\r\n  isFiltersOpen: false,\r\n  isSearchFocused: false,\r\n  showSuggestions: false,\r\n  showAnalytics: false,\r\n  showInsights: false,\r\n\r\n  // Analytics\r\n  searchAnalytics: {\r\n    totalSearches: 0,\r\n    popularSearches: [],\r\n    searchPerformance: {},\r\n    userBehavior: {},\r\n    conversionRates: {},\r\n  },\r\n\r\n  // Search insights\r\n  searchInsights: {\r\n    relatedSearches: [],\r\n    popularCategories: [],\r\n    trendingProducts: [],\r\n    priceInsights: {},\r\n    recommendations: [],\r\n  },\r\n\r\n  // Export state\r\n  isExporting: false,\r\n  exportError: null,\r\n};\r\n\r\nconst searchSlice = createSlice({\r\n  name: \"search\",\r\n  initialState,\r\n  reducers: {\r\n    // Search actions\r\n    setQuery: (state, action) => {\r\n      state.query = action.payload;\r\n    },\r\n    clearQuery: (state) => {\r\n      state.query = \"\";\r\n    },\r\n    clearResults: (state) => {\r\n      state.results = [];\r\n      state.totalResults = 0;\r\n    },\r\n\r\n    // Filter actions\r\n    setPriceRange: (state, action) => {\r\n      state.filters.priceRange = action.payload;\r\n    },\r\n    setBrands: (state, action) => {\r\n      state.filters.brands = action.payload;\r\n    },\r\n    setCategories: (state, action) => {\r\n      state.filters.categories = action.payload;\r\n    },\r\n    setRatings: (state, action) => {\r\n      state.filters.ratings = action.payload;\r\n    },\r\n    setAvailability: (state, action) => {\r\n      state.filters.availability = action.payload;\r\n    },\r\n    setSortBy: (state, action) => {\r\n      state.filters.sortBy = action.payload;\r\n    },\r\n    setViewMode: (state, action) => {\r\n      state.filters.viewMode = action.payload;\r\n    },\r\n    clearFilters: (state) => {\r\n      state.filters = {\r\n        priceRange: { min: 0, max: 1000 },\r\n        brands: [],\r\n        categories: [],\r\n        ratings: [],\r\n        availability: \"all\",\r\n        sortBy: \"relevance\",\r\n        viewMode: \"grid\",\r\n      };\r\n    },\r\n\r\n    // UI actions\r\n    toggleFilters: (state) => {\r\n      state.isFiltersOpen = !state.isFiltersOpen;\r\n    },\r\n    setFiltersOpen: (state, action) => {\r\n      state.isFiltersOpen = action.payload;\r\n    },\r\n    setSearchFocused: (state, action) => {\r\n      state.isSearchFocused = action.payload;\r\n    },\r\n    setShowSuggestions: (state, action) => {\r\n      state.showSuggestions = action.payload;\r\n    },\r\n\r\n    // Search history actions\r\n    addToSearchHistory: (state, action) => {\r\n      const query = action.payload;\r\n      // Remove if already exists\r\n      state.searchHistory = state.searchHistory.filter(\r\n        (item) => item !== query\r\n      );\r\n      // Add to beginning\r\n      state.searchHistory.unshift(query);\r\n      // Keep only max items\r\n      if (state.searchHistory.length > state.maxHistoryItems) {\r\n        state.searchHistory = state.searchHistory.slice(\r\n          0,\r\n          state.maxHistoryItems\r\n        );\r\n      }\r\n      saveSearchHistory(state.searchHistory);\r\n    },\r\n    removeFromSearchHistory: (state, action) => {\r\n      const query = action.payload;\r\n      state.searchHistory = state.searchHistory.filter(\r\n        (item) => item !== query\r\n      );\r\n      saveSearchHistory(state.searchHistory);\r\n    },\r\n    clearSearchHistory: (state) => {\r\n      state.searchHistory = [];\r\n      localStorage.removeItem(\"searchHistory\");\r\n    },\r\n\r\n    // Search alerts actions\r\n    addToSearchAlerts: (state, action) => {\r\n      const alert = action.payload;\r\n      // Remove if already exists\r\n      state.searchAlerts = state.searchAlerts.filter(\r\n        (item) => item.id === alert.id\r\n      );\r\n      // Add to beginning\r\n      state.searchAlerts.unshift(alert);\r\n      // Keep only max items\r\n      if (state.searchAlerts.length > state.maxAlertsItems) {\r\n        state.searchAlerts = state.searchAlerts.slice(0, state.maxAlertsItems);\r\n      }\r\n      saveSearchAlerts(state.searchAlerts);\r\n    },\r\n    removeFromSearchAlerts: (state, action) => {\r\n      const alertId = action.payload;\r\n      state.searchAlerts = state.searchAlerts.filter(\r\n        (item) => item.id !== alertId\r\n      );\r\n      saveSearchAlerts(state.searchAlerts);\r\n    },\r\n    clearSearchAlerts: (state) => {\r\n      state.searchAlerts = [];\r\n      localStorage.removeItem(\"searchAlerts\");\r\n    },\r\n\r\n    // Analytics actions\r\n    setShowAnalytics: (state, action) => {\r\n      state.showAnalytics = action.payload;\r\n    },\r\n    setShowInsights: (state, action) => {\r\n      state.showInsights = action.payload;\r\n    },\r\n\r\n    // Export actions\r\n    setIsExporting: (state, action) => {\r\n      state.isExporting = action.payload;\r\n    },\r\n    setExportError: (state, action) => {\r\n      state.exportError = action.payload;\r\n    },\r\n\r\n    // Reset actions\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.message = \"\";\r\n    },\r\n    clearError: (state) => {\r\n      state.isError = false;\r\n      state.message = \"\";\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Search Products\r\n      .addCase(searchProducts.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.isError = false;\r\n      })\r\n      .addCase(searchProducts.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.results = action.payload.products || [];\r\n        state.totalResults = action.payload.total || 0;\r\n        // Add to search history\r\n        if (state.query.trim()) {\r\n          state.searchHistory = state.searchHistory.filter(\r\n            (item) => item !== state.query\r\n          );\r\n          state.searchHistory.unshift(state.query);\r\n          if (state.searchHistory.length > state.maxHistoryItems) {\r\n            state.searchHistory = state.searchHistory.slice(\r\n              0,\r\n              state.maxHistoryItems\r\n            );\r\n          }\r\n          saveSearchHistory(state.searchHistory);\r\n        }\r\n      })\r\n      .addCase(searchProducts.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      // Get Search Suggestions\r\n      .addCase(getSearchSuggestions.pending, (state) => {\r\n        // Don't set loading for suggestions\r\n      })\r\n      .addCase(getSearchSuggestions.fulfilled, (state, action) => {\r\n        state.suggestions = action.payload.suggestions || [];\r\n      })\r\n      .addCase(getSearchSuggestions.rejected, (state, action) => {\r\n        state.suggestions = [];\r\n      })\r\n      // Get Trending Searches\r\n      .addCase(getTrendingSearches.pending, (state) => {\r\n        // Don't set loading for trending searches\r\n      })\r\n      .addCase(getTrendingSearches.fulfilled, (state, action) => {\r\n        state.trendingSearches = action.payload.trending || [];\r\n      })\r\n      .addCase(getTrendingSearches.rejected, (state, action) => {\r\n        state.trendingSearches = [];\r\n      })\r\n      // Get Search Analytics\r\n      .addCase(getSearchAnalytics.pending, (state) => {\r\n        // Don't set loading for analytics\r\n      })\r\n      .addCase(getSearchAnalytics.fulfilled, (state, action) => {\r\n        state.searchAnalytics = action.payload;\r\n      })\r\n      .addCase(getSearchAnalytics.rejected, (state, action) => {\r\n        // state.searchAnalytics = {}; // No need to reset, it's a total count\r\n      })\r\n      // Get Search Insights\r\n      .addCase(getSearchInsights.pending, (state) => {\r\n        // Don't set loading for insights\r\n      })\r\n      .addCase(getSearchInsights.fulfilled, (state, action) => {\r\n        state.searchInsights = action.payload;\r\n      })\r\n      .addCase(getSearchInsights.rejected, (state, action) => {\r\n        // state.searchInsights = {}; // No need to reset, it's a total count\r\n      })\r\n      // Export Search Results\r\n      .addCase(exportSearchResults.pending, (state) => {\r\n        state.isExporting = true;\r\n        state.exportError = null;\r\n      })\r\n      .addCase(exportSearchResults.fulfilled, (state, action) => {\r\n        state.isExporting = false;\r\n        // You might want to trigger a download here or handle the blob data\r\n        // For now, we'll just log the success\r\n        console.log(\"Search results exported successfully:\", action.payload);\r\n      })\r\n      .addCase(exportSearchResults.rejected, (state, action) => {\r\n        state.isExporting = false;\r\n        state.exportError = action.payload;\r\n        console.error(\"Error exporting search results:\", action.payload);\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  setQuery,\r\n  clearQuery,\r\n  clearResults,\r\n  setPriceRange,\r\n  setBrands,\r\n  setCategories,\r\n  setRatings,\r\n  setAvailability,\r\n  setSortBy,\r\n  setViewMode,\r\n  clearFilters,\r\n  toggleFilters,\r\n  setFiltersOpen,\r\n  setSearchFocused,\r\n  setShowSuggestions,\r\n  addToSearchHistory,\r\n  removeFromSearchHistory,\r\n  clearSearchHistory,\r\n  addToSearchAlerts,\r\n  removeFromSearchAlerts,\r\n  clearSearchAlerts,\r\n  setShowAnalytics,\r\n  setShowInsights,\r\n  setIsExporting,\r\n  setExportError,\r\n  reset,\r\n  clearError,\r\n} = searchSlice.actions;\r\n\r\nexport default searchSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}