{"ast":null,"code":"import api from \"./api\";\nconst STRIPE_API_BASE = \"/stripe\";\nexport const stripeService = {\n  /**\r\n   * Create a Stripe checkout session\r\n   * @param {Object} data - Checkout session data\r\n   * @param {string} data.email - Customer email\r\n   * @returns {Promise<Object>} - Session data with URL\r\n   */\n  createCheckoutSession: async (data = {}) => {\n    try {\n      const response = await api.post(`${STRIPE_API_BASE}/create-checkout-session`, data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error creating checkout session:\", error);\n      throw error;\n    }\n  },\n  /**\r\n   * Get checkout session details\r\n   * @param {string} sessionId - Stripe session ID\r\n   * @returns {Promise<Object>} - Session details\r\n   */\n  getSessionDetails: async sessionId => {\n    try {\n      const response = await api.get(`${STRIPE_API_BASE}/session/${sessionId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error getting session details:\", error);\n      throw error;\n    }\n  },\n  /**\r\n   * Check Stripe health/configuration\r\n   * @returns {Promise<Object>} - Health check result\r\n   */\n  healthCheck: async () => {\n    try {\n      const response = await api.get(`${STRIPE_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error checking Stripe health:\", error);\n      throw error;\n    }\n  },\n  /**\r\n   * Redirect to Stripe checkout\r\n   * @param {string} sessionId - Stripe session ID\r\n   */\n  redirectToCheckout: sessionId => {\n    if (typeof window !== \"undefined\" && window.Stripe) {\n      return window.Stripe.redirectToCheckout({\n        sessionId: sessionId\n      });\n    } else {\n      console.error(\"Stripe.js is not loaded\");\n      throw new Error(\"Stripe.js is not loaded\");\n    }\n  },\n  /**\r\n   * Load Stripe.js script\r\n   * @param {string} publishableKey - Stripe publishable key\r\n   * @returns {Promise} - Promise that resolves when Stripe is loaded\r\n   */\n  loadStripe: publishableKey => {\n    return new Promise((resolve, reject) => {\n      if (window.Stripe) {\n        resolve(window.Stripe(publishableKey));\n        return;\n      }\n      const script = document.createElement(\"script\");\n      script.src = \"https://js.stripe.com/v3/\";\n      script.onload = () => {\n        if (window.Stripe) {\n          resolve(window.Stripe(publishableKey));\n        } else {\n          reject(new Error(\"Failed to load Stripe\"));\n        }\n      };\n      script.onerror = () => reject(new Error(\"Failed to load Stripe\"));\n      document.head.appendChild(script);\n    });\n  }\n};\nexport default stripeService;","map":{"version":3,"names":["api","STRIPE_API_BASE","stripeService","createCheckoutSession","data","response","post","error","console","getSessionDetails","sessionId","get","healthCheck","redirectToCheckout","window","Stripe","Error","loadStripe","publishableKey","Promise","resolve","reject","script","document","createElement","src","onload","onerror","head","appendChild"],"sources":["C:/Users/Ayoub/Desktop/Projects/e-commerce/frontend/src/services/stripeService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\nconst STRIPE_API_BASE = \"/stripe\";\r\n\r\nexport const stripeService = {\r\n  /**\r\n   * Create a Stripe checkout session\r\n   * @param {Object} data - Checkout session data\r\n   * @param {string} data.email - Customer email\r\n   * @returns {Promise<Object>} - Session data with URL\r\n   */\r\n  createCheckoutSession: async (data = {}) => {\r\n    try {\r\n      const response = await api.post(\r\n        `${STRIPE_API_BASE}/create-checkout-session`,\r\n        data\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error creating checkout session:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get checkout session details\r\n   * @param {string} sessionId - Stripe session ID\r\n   * @returns {Promise<Object>} - Session details\r\n   */\r\n  getSessionDetails: async (sessionId) => {\r\n    try {\r\n      const response = await api.get(`${STRIPE_API_BASE}/session/${sessionId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error getting session details:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check Stripe health/configuration\r\n   * @returns {Promise<Object>} - Health check result\r\n   */\r\n  healthCheck: async () => {\r\n    try {\r\n      const response = await api.get(`${STRIPE_API_BASE}/health`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error checking Stripe health:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Redirect to Stripe checkout\r\n   * @param {string} sessionId - Stripe session ID\r\n   */\r\n  redirectToCheckout: (sessionId) => {\r\n    if (typeof window !== \"undefined\" && window.Stripe) {\r\n      return window.Stripe.redirectToCheckout({\r\n        sessionId: sessionId,\r\n      });\r\n    } else {\r\n      console.error(\"Stripe.js is not loaded\");\r\n      throw new Error(\"Stripe.js is not loaded\");\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Load Stripe.js script\r\n   * @param {string} publishableKey - Stripe publishable key\r\n   * @returns {Promise} - Promise that resolves when Stripe is loaded\r\n   */\r\n  loadStripe: (publishableKey) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (window.Stripe) {\r\n        resolve(window.Stripe(publishableKey));\r\n        return;\r\n      }\r\n\r\n      const script = document.createElement(\"script\");\r\n      script.src = \"https://js.stripe.com/v3/\";\r\n      script.onload = () => {\r\n        if (window.Stripe) {\r\n          resolve(window.Stripe(publishableKey));\r\n        } else {\r\n          reject(new Error(\"Failed to load Stripe\"));\r\n        }\r\n      };\r\n      script.onerror = () => reject(new Error(\"Failed to load Stripe\"));\r\n      document.head.appendChild(script);\r\n    });\r\n  },\r\n};\r\n\r\nexport default stripeService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,eAAe,GAAG,SAAS;AAEjC,OAAO,MAAMC,aAAa,GAAG;EAC3B;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqB,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,CAAC,KAAK;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAC7B,GAAGL,eAAe,0BAA0B,EAC5CG,IACF,CAAC;MACD,OAAOC,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,iBAAiB,EAAE,MAAOC,SAAS,IAAK;IACtC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAML,GAAG,CAACW,GAAG,CAAC,GAAGV,eAAe,YAAYS,SAAS,EAAE,CAAC;MACzE,OAAOL,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACEK,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAML,GAAG,CAACW,GAAG,CAAC,GAAGV,eAAe,SAAS,CAAC;MAC3D,OAAOI,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACEM,kBAAkB,EAAGH,SAAS,IAAK;IACjC,IAAI,OAAOI,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,MAAM,EAAE;MAClD,OAAOD,MAAM,CAACC,MAAM,CAACF,kBAAkB,CAAC;QACtCH,SAAS,EAAEA;MACb,CAAC,CAAC;IACJ,CAAC,MAAM;MACLF,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAC;MACxC,MAAM,IAAIS,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,UAAU,EAAGC,cAAc,IAAK;IAC9B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAIP,MAAM,CAACC,MAAM,EAAE;QACjBK,OAAO,CAACN,MAAM,CAACC,MAAM,CAACG,cAAc,CAAC,CAAC;QACtC;MACF;MAEA,MAAMI,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,GAAG,GAAG,2BAA2B;MACxCH,MAAM,CAACI,MAAM,GAAG,MAAM;QACpB,IAAIZ,MAAM,CAACC,MAAM,EAAE;UACjBK,OAAO,CAACN,MAAM,CAACC,MAAM,CAACG,cAAc,CAAC,CAAC;QACxC,CAAC,MAAM;UACLG,MAAM,CAAC,IAAIL,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC5C;MACF,CAAC;MACDM,MAAM,CAACK,OAAO,GAAG,MAAMN,MAAM,CAAC,IAAIL,KAAK,CAAC,uBAAuB,CAAC,CAAC;MACjEO,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,MAAM,CAAC;IACnC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAepB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}