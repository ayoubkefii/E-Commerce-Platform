{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport adminService from \"../../services/adminService\";\nconst initialState = {\n  dashboardStats: null,\n  userStats: null,\n  recentOrders: [],\n  recentUsers: [],\n  isLoading: false,\n  isError: false,\n  message: \"\"\n};\n\n// Get dashboard statistics\nexport const getDashboardStats = createAsyncThunk(\"admin/getDashboardStats\", async (_, thunkAPI) => {\n  try {\n    return await adminService.getDashboardStats();\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get user statistics\nexport const getUserStats = createAsyncThunk(\"admin/getUserStats\", async (_, thunkAPI) => {\n  try {\n    return await adminService.getUserStats();\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get recent orders\nexport const getRecentOrders = createAsyncThunk(\"admin/getRecentOrders\", async (_, thunkAPI) => {\n  try {\n    const response = await adminService.getAllOrders({\n      limit: 5\n    });\n    return response.orders || [];\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Update order status\nexport const updateOrderStatus = createAsyncThunk(\"admin/updateOrderStatus\", async ({\n  orderId,\n  statusData\n}, thunkAPI) => {\n  try {\n    return await adminService.updateOrderStatus(orderId, statusData);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const adminSlice = createSlice({\n  name: \"admin\",\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.message = \"\";\n    },\n    clearError: state => {\n      state.isError = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Get Dashboard Stats\n    .addCase(getDashboardStats.pending, state => {\n      state.isLoading = true;\n    }).addCase(getDashboardStats.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.dashboardStats = action.payload;\n    }).addCase(getDashboardStats.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    })\n    // Get User Stats\n    .addCase(getUserStats.pending, state => {\n      state.isLoading = true;\n    }).addCase(getUserStats.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.userStats = action.payload;\n    }).addCase(getUserStats.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    })\n    // Get Recent Orders\n    .addCase(getRecentOrders.pending, state => {\n      state.isLoading = true;\n    }).addCase(getRecentOrders.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.recentOrders = action.payload;\n    }).addCase(getRecentOrders.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    })\n    // Update Order Status\n    .addCase(updateOrderStatus.pending, state => {\n      state.isLoading = true;\n    }).addCase(updateOrderStatus.fulfilled, (state, action) => {\n      state.isLoading = false;\n      // Update the order in recentOrders if it exists\n      const orderIndex = state.recentOrders.findIndex(order => order.id === action.payload.id);\n      if (orderIndex !== -1) {\n        state.recentOrders[orderIndex] = action.payload;\n      }\n    }).addCase(updateOrderStatus.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset,\n  clearError\n} = adminSlice.actions;\nexport default adminSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","adminService","initialState","dashboardStats","userStats","recentOrders","recentUsers","isLoading","isError","message","getDashboardStats","_","thunkAPI","error","response","data","toString","rejectWithValue","getUserStats","getRecentOrders","getAllOrders","limit","orders","updateOrderStatus","orderId","statusData","adminSlice","name","reducers","reset","state","clearError","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","orderIndex","findIndex","order","id","actions","reducer"],"sources":["C:/Users/Ayoub/Desktop/Projects/e-commerce/frontend/src/features/admin/adminSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport adminService from \"../../services/adminService\";\r\n\r\nconst initialState = {\r\n  dashboardStats: null,\r\n  userStats: null,\r\n  recentOrders: [],\r\n  recentUsers: [],\r\n  isLoading: false,\r\n  isError: false,\r\n  message: \"\",\r\n};\r\n\r\n// Get dashboard statistics\r\nexport const getDashboardStats = createAsyncThunk(\r\n  \"admin/getDashboardStats\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      return await adminService.getDashboardStats();\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Get user statistics\r\nexport const getUserStats = createAsyncThunk(\r\n  \"admin/getUserStats\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      return await adminService.getUserStats();\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Get recent orders\r\nexport const getRecentOrders = createAsyncThunk(\r\n  \"admin/getRecentOrders\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const response = await adminService.getAllOrders({ limit: 5 });\r\n      return response.orders || [];\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Update order status\r\nexport const updateOrderStatus = createAsyncThunk(\r\n  \"admin/updateOrderStatus\",\r\n  async ({ orderId, statusData }, thunkAPI) => {\r\n    try {\r\n      return await adminService.updateOrderStatus(orderId, statusData);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const adminSlice = createSlice({\r\n  name: \"admin\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.message = \"\";\r\n    },\r\n    clearError: (state) => {\r\n      state.isError = false;\r\n      state.message = \"\";\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Get Dashboard Stats\r\n      .addCase(getDashboardStats.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getDashboardStats.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.dashboardStats = action.payload;\r\n      })\r\n      .addCase(getDashboardStats.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      // Get User Stats\r\n      .addCase(getUserStats.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getUserStats.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.userStats = action.payload;\r\n      })\r\n      .addCase(getUserStats.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      // Get Recent Orders\r\n      .addCase(getRecentOrders.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getRecentOrders.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.recentOrders = action.payload;\r\n      })\r\n      .addCase(getRecentOrders.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      // Update Order Status\r\n      .addCase(updateOrderStatus.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(updateOrderStatus.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        // Update the order in recentOrders if it exists\r\n        const orderIndex = state.recentOrders.findIndex(\r\n          (order) => order.id === action.payload.id\r\n        );\r\n        if (orderIndex !== -1) {\r\n          state.recentOrders[orderIndex] = action.payload;\r\n        }\r\n      })\r\n      .addCase(updateOrderStatus.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset, clearError } = adminSlice.actions;\r\nexport default adminSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}